package ui.components.panels;

import chat.client.audio.c.MicThread;
import controller.ChatController;
import datamodel.enums.EnumMessageType;
import datamodel.pojo.SoundPacket;
import datamodel.pojo.User;
import datamodel.pojo.Utils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.TargetDataLine;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author Lazar Davidovic
 */
public class JPanelChat extends javax.swing.JPanel {

    List<JTextArea> tabTextAreaList = new ArrayList<>();
    private MicTester micTester;

    /**
     * @return the jButtonAudioVideo
     */
    public javax.swing.JButton getjButtonAudioVideo() {
        return jButtonAudioVideo;
    }

    /**
     * @param jButtonAudioVideo the jButtonAudioVideo to set
     */
    public void setjButtonAudioVideo(javax.swing.JButton jButtonAudioVideo) {
        this.jButtonAudioVideo = jButtonAudioVideo;
    }
    //this class is used to test the microphone. it manages the volume meter
    private class MicTester extends Thread{
        private TargetDataLine mic = null;
        public MicTester() {
            
        }
        @Override
        public void run() {
                
                try {
                    AudioFormat af = SoundPacket.defaultFormat;
                    DataLine.Info info = new DataLine.Info(TargetDataLine.class, null);
                    mic = (TargetDataLine) (AudioSystem.getLine(info));
                    mic.open(af);
                    mic.start();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(new JFrame(),"Microphone not detected.\nPress OK to close this program", "Error",JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                }
                for (;;) {
                    Utils.sleep(10);
                    if(mic.available()>0){
                        byte[] buff=new byte[SoundPacket.defaultDataLenght];
                        mic.read(buff,0,buff.length);
                        long tot=0;
                        for(int i=0;i<buff.length;i++) tot+=MicThread.amplification*Math.abs(buff[i]);
                        tot*=2.5;
                        tot/=buff.length;
                        micLev.setValue((int)tot);
                    }
                }
            }
        private void close(){
            if(mic!=null) mic.close();
            stop();
        }
    }

    /**
     * Creates new form JPanelChat
     */
    public JPanelChat() {
        initComponents();
//        micTester=new MicTester();
//        micTester.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelHistory = new javax.swing.JPanel();
        jTabbedPaneHistory = new javax.swing.JTabbedPane();
        jPanelUsers = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListUsers = new javax.swing.JList<>();
        jPanelMessage = new javax.swing.JPanel();
        jTextFieldMessage = new javax.swing.JTextField();
        jButtonSend = new javax.swing.JButton();
        jButtonAudioVideo = new javax.swing.JButton();
        jButtonAudio = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        micLev = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        micVol = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jCheckBoxUPnP = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        jPanelHistory.setBorder(javax.swing.BorderFactory.createTitledBorder("Istorija"));

        javax.swing.GroupLayout jPanelHistoryLayout = new javax.swing.GroupLayout(jPanelHistory);
        jPanelHistory.setLayout(jPanelHistoryLayout);
        jPanelHistoryLayout.setHorizontalGroup(
            jPanelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHistoryLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jTabbedPaneHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))
        );
        jPanelHistoryLayout.setVerticalGroup(
            jPanelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
        );

        jPanelUsers.setBorder(javax.swing.BorderFactory.createTitledBorder("Korisnici"));

        jScrollPane1.setViewportView(jListUsers);

        javax.swing.GroupLayout jPanelUsersLayout = new javax.swing.GroupLayout(jPanelUsers);
        jPanelUsers.setLayout(jPanelUsersLayout);
        jPanelUsersLayout.setHorizontalGroup(
            jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
        );
        jPanelUsersLayout.setVerticalGroup(
            jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
        );

        jTextFieldMessage.setEditable(false);

        jButtonSend.setText("Posalji");
        jButtonSend.setEnabled(false);
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jButtonAudioVideo.setText("Audio/Video");
        jButtonAudioVideo.setEnabled(false);
        jButtonAudioVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAudioVideoActionPerformed(evt);
            }
        });

        jButtonAudio.setText("Audio");
        jButtonAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAudioActionPerformed(evt);
            }
        });

        jLabel3.setText("Mic level");

        jLabel4.setText("Mic volume");

        micVol.setMaximum(300);
        micVol.setMinimum(50);
        micVol.setValue(100);
        micVol.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                micVolStateChanged(evt);
            }
        });

        jLabel2.setText("If the mic level doesn't move as you speak, the mic volume is too low");

        jCheckBoxUPnP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUPnPActionPerformed(evt);
            }
        });

        jLabel1.setText("UPnP");

        javax.swing.GroupLayout jPanelMessageLayout = new javax.swing.GroupLayout(jPanelMessage);
        jPanelMessage.setLayout(jPanelMessageLayout);
        jPanelMessageLayout.setHorizontalGroup(
            jPanelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMessageLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAudioVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelMessageLayout.createSequentialGroup()
                        .addComponent(jTextFieldMessage)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSend))
                    .addComponent(jButtonAudio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelMessageLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(micLev, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelMessageLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(micVol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelMessageLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxUPnP)
                        .addGap(53, 53, 53)))
                .addContainerGap())
        );
        jPanelMessageLayout.setVerticalGroup(
            jPanelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMessageLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSend))
                .addGap(30, 30, 30)
                .addGroup(jPanelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(micLev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(micVol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxUPnP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addComponent(jButtonAudioVideo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAudio)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelHistory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelUsers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanelMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelHistory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelUsers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void micVolStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_micVolStateChanged
        MicThread.amplification=((double)(micVol.getValue()))/100.0;
    }//GEN-LAST:event_micVolStateChanged

    private void jButtonAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAudioActionPerformed
//        micTester.close();
        
        List<String> selectedUserNames = jListUsers.getSelectedValuesList();
        boolean selected = jCheckBoxUPnP.isSelected();
        System.out.println("Lista izabranih korisnika za audio komunikaciju: " + selectedUserNames);

        int option = JOptionPane.showConfirmDialog(null, "Potvrda audio poziva?", "Audio poziv", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            ChatController.connectAudioStream(selectedUserNames, selected);
        } else {
        }
    }//GEN-LAST:event_jButtonAudioActionPerformed

    private void jButtonAudioVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAudioVideoActionPerformed

        if (getjButtonAudioVideo().getText().equals("Audio/Video")) {
            List<String> selectedUserNames = jListUsers.getSelectedValuesList();
            boolean selected = jCheckBoxUPnP.isSelected();
            System.out.println("Lista izabranih korisnika za audio/video komunikaciju: " + selectedUserNames);

            int option = JOptionPane.showConfirmDialog(null, "Potvrda audio/video poziva?", "A/V poziv", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                ChatController.connectVideoStream(selectedUserNames);
                ChatController.connectAudioStream(selectedUserNames, selected);
                getjButtonAudioVideo().setText("Prekini konekciju");

            } else {
            }
        } else {
            getjButtonAudioVideo().setText("Audio/Video");
            ChatController.stopStream();
            
        }
    }//GEN-LAST:event_jButtonAudioVideoActionPerformed

    private void setButton() {
        getjButtonAudioVideo().setText("Prekini konekciju");
    }
    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed

        String userMessage = jTextFieldMessage.getText().trim();

        jTextFieldMessage.setText("");

        System.out.println("Poruka korisnika: " + userMessage);

        List<String> selectedUserNames = jListUsers.getSelectedValuesList();

        System.out.println("Lista izabranih korisnika za prosledjivanje poruke: " + selectedUserNames);

        for (String to : selectedUserNames) {
            fillHistory(EnumMessageType.TEXT_FROM_CLIENT, ChatController.returnActiveUserName(), to, userMessage);

        }

        ChatController.sendMessage(selectedUserNames, userMessage);
    }//GEN-LAST:event_jButtonSendActionPerformed

    private void jCheckBoxUPnPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUPnPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxUPnPActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAudio;
    private javax.swing.JButton jButtonAudioVideo;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JCheckBox jCheckBoxUPnP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListUsers;
    private javax.swing.JPanel jPanelHistory;
    private javax.swing.JPanel jPanelMessage;
    private javax.swing.JPanel jPanelUsers;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPaneHistory;
    private javax.swing.JTextField jTextFieldMessage;
    private javax.swing.JProgressBar micLev;
    private javax.swing.JSlider micVol;
    // End of variables declaration//GEN-END:variables

    public void fillList(List<User> users) {
        if (users != null) {
            DefaultListModel model = new DefaultListModel();
            int i = 0;
            for (User user : users) {
                //model.setElementAt(user.getUserName(), i);
                model.addElement(user.getUserName());
                i++;
            }
            //model.addElement(users.toArray());

            jListUsers.setModel(model);
            jListUsers.setVisibleRowCount(5);

            if (!users.isEmpty()) {
                jTextFieldMessage.setEditable(true);
                jButtonSend.setEnabled(true);
                getjButtonAudioVideo().setEnabled(true);
            }
        }
    }

    public void fillHistory(EnumMessageType messageDirection, String from, String to, String message) {

        //Text area
        //jTextAreaHistory.setText("To "+jTextAreaHistory.getText() + userName + " => " + message + '\n');
        boolean existUserName = false;

        System.out.println("Broj aktivnih komunikacija: " + jTabbedPaneHistory.getTabCount());

        for (int i = 0; i < jTabbedPaneHistory.getTabCount(); i++) {
            switch (messageDirection) {
                case TEXT_FROM_CLIENT:
                    if (jTabbedPaneHistory.getTitleAt(i).equals(to)) {
                        existUserName = true;
                        JTextArea selectedTextArea = tabTextAreaList.get(i);
                        selectedTextArea.setText(selectedTextArea.getText() + from + " => " + message + '\n');
                    }
                    break;
                case TEXT_FROM_SERVER:
                    if (jTabbedPaneHistory.getTitleAt(i).equals(from)) {
                        existUserName = true;
                        JTextArea selectedTextArea = tabTextAreaList.get(i);
                        selectedTextArea.setText(selectedTextArea.getText() + from + ": " + message + '\n');
                    }
                    break;
            }

        }

        if (!existUserName) {
            JScrollPane selectedUserPane = new JScrollPane();
            JTextArea selectedTextArea = new JTextArea();
            switch (messageDirection) {
                case TEXT_FROM_CLIENT:
                    jTabbedPaneHistory.addTab(to, selectedUserPane);
                    selectedTextArea.setText(from + " => " + message + '\n');
                    break;
                case TEXT_FROM_SERVER:
                    jTabbedPaneHistory.addTab(from, selectedUserPane);
                    selectedTextArea.setText(from + ": " + message + '\n');
                    break;
            }
            tabTextAreaList.add(selectedTextArea);
            selectedUserPane.setViewportView(selectedTextArea);
        }
    }
    
    
}
