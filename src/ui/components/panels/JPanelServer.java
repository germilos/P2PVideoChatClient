package ui.components.panels;

import controller.ChatController;
import datamodel.enums.EnumFieldTypes;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import ui.validator.InterfaceValidator;

/**
 *
 * @author Lazar Davidovic
 */
public class JPanelServer extends javax.swing.JPanel {

    private InterfaceValidator validator;

    /**
     * Creates new form JPanelServer
     */
    public JPanelServer() {
        initComponents();
        changeFields();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelServerAdress = new javax.swing.JLabel();
        jTextFieldServerAdress = new javax.swing.JTextField();
        jLabelServerPortTCP = new javax.swing.JLabel();
        jTextFieldServerPortTCP = new javax.swing.JTextField();
        jLabelError = new javax.swing.JLabel();
        jLabelError1 = new javax.swing.JLabel();
        jLabelServerPortUDP = new javax.swing.JLabel();
        jTextFieldServerPortUDP = new javax.swing.JTextField();
        jCheckBoxAutomaticBind = new javax.swing.JCheckBox();

        jLabelServerAdress.setText("Adresa servera (*):");

        jLabelServerPortTCP.setText("TCP port servera (*):");

        jLabelError.setForeground(new java.awt.Color(255, 51, 51));
        jLabelError.setText(" ");

        jLabelError1.setForeground(new java.awt.Color(255, 51, 51));
        jLabelError1.setText(" ");

        jLabelServerPortUDP.setText("UDP port klijenta (*):");

        jCheckBoxAutomaticBind.setText("Automatski dodeli");
        jCheckBoxAutomaticBind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAutomaticBindActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelServerAdress)
                    .addComponent(jLabelServerPortTCP)
                    .addComponent(jLabelServerPortUDP))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldServerAdress)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldServerPortTCP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelError1))
                            .addComponent(jLabelError)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldServerPortUDP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxAutomaticBind)))
                        .addGap(0, 32, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelServerAdress)
                    .addComponent(jTextFieldServerAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelServerPortTCP)
                    .addComponent(jTextFieldServerPortTCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelError1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelServerPortUDP)
                    .addComponent(jTextFieldServerPortUDP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxAutomaticBind))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxAutomaticBindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAutomaticBindActionPerformed

        //Automatic values
        if (jCheckBoxAutomaticBind.isSelected()) {
            jTextFieldServerAdress.setEditable(false);
            jTextFieldServerPortTCP.setEditable(false);
            jTextFieldServerPortUDP.setEditable(false);

            fillRandomData();

            //Manual input
        } else {
            jTextFieldServerAdress.setEditable(true);
            jTextFieldServerPortTCP.setEditable(true);
            jTextFieldServerPortUDP.setEditable(true);

            fillManualData();

        }
    }//GEN-LAST:event_jCheckBoxAutomaticBindActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxAutomaticBind;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JLabel jLabelError1;
    private javax.swing.JLabel jLabelServerAdress;
    private javax.swing.JLabel jLabelServerPortTCP;
    private javax.swing.JLabel jLabelServerPortUDP;
    private javax.swing.JTextField jTextFieldServerAdress;
    private javax.swing.JTextField jTextFieldServerPortTCP;
    private javax.swing.JTextField jTextFieldServerPortUDP;
    // End of variables declaration//GEN-END:variables

    public String getServerAdressValue() throws Exception {
        if (validator != null) {
            try {
                validator.validate(jTextFieldServerAdress.getText().trim(), EnumFieldTypes.SERVER_ADRESS);
                jLabelError.setText("");
            } catch (Exception ex) {
                jLabelError.setText(ex.getMessage());
//                throw ex;
                throw new Exception("Error!");
            }
        }
        return jTextFieldServerAdress.getText().trim();
    }

    public String getServerPortValue() throws Exception {
        if (validator != null) {
            try {
                validator.validate(jTextFieldServerPortTCP.getText().trim(), EnumFieldTypes.SERVER_PORT);
                validator.validate(jTextFieldServerPortUDP.getText().trim(), EnumFieldTypes.SERVER_PORT);

                jLabelError.setText("");
            } catch (Exception ex) {
                jLabelError.setText(ex.getMessage());
//                throw ex;
                throw new Exception("Error!");
            }
        }
        return jTextFieldServerPortTCP.getText().trim();
    }

    public void setValidator(InterfaceValidator validator) {
        this.validator = validator;
    }

    public javax.swing.JTextField getjTextFieldServerAdress() {
        return jTextFieldServerAdress;
    }

    public void setjTextFieldServerAdress(javax.swing.JTextField jTextFieldServerAdress) {
        this.jTextFieldServerAdress = jTextFieldServerAdress;
    }

    public javax.swing.JTextField getjTextFieldServerPortTCP() {
        return jTextFieldServerPortTCP;
    }

    public void setjTextFieldServerPortTCP(javax.swing.JTextField jTextFieldServerPortTCP) {
        this.jTextFieldServerPortTCP = jTextFieldServerPortTCP;
    }

    public javax.swing.JTextField getjTextFieldServerPortUDP() {
        return jTextFieldServerPortUDP;
    }

    public void setjTextFieldServerPortUDP(javax.swing.JTextField jTextFieldServerPortUDP) {
        this.jTextFieldServerPortUDP = jTextFieldServerPortUDP;
    }

    private void changeFields() {
//        jLabelServerPortUDP.setVisible(false);
//        jTextFieldServerPortUDP.setVisible(false);

        if (jCheckBoxAutomaticBind.isSelected()) {
            jTextFieldServerPortUDP.setEditable(false);
        }
    }

    public javax.swing.JCheckBox getjCheckBoxAutomaticBind() {
        return jCheckBoxAutomaticBind;
    }

    private void fillRandomData() {
        jTextFieldServerAdress.setText("localhost");
        jTextFieldServerPortTCP.setText("1714");
        int randomUDPPort = ThreadLocalRandom.current().nextInt(1023, 5000);
        jTextFieldServerPortUDP.setText(Integer.toString(randomUDPPort));

//        jTextFieldServerPortUDP.setText(Integer.toString(ChatController.getFreePort()));
    }

    private void fillManualData() {
        jTextFieldServerAdress.setText("localhost");
        jTextFieldServerPortTCP.setText("1714");
        int randomUDPPort = ThreadLocalRandom.current().nextInt(1023, 5000);
        jTextFieldServerPortUDP.setText(Integer.toString(randomUDPPort));

//        jTextFieldServerPortUDP.setText(Integer.toString(ChatController.getFreePort()));
    }

}
